#!/bin/sh
#
# demo2 [-h][-acCnstTu] [<host> | start | stop]
#
#
# REQUIRED FILES:	
#	./demo2.functions
#	./demo2.setupfile
#
# ASSUMPTIONS;
#  - We are running in a fully built ucd-snmp-crypto/testing directory
#  - Some snmpd.conf file contains (using the correct engineIDs).
#	See demo2.setupfile.
#
#
# XXX	Use 'autoconfig' to decide whether to delete critical files?
# XXX	sleep for N seconds option?
# XXX	Get rid of initial MIB parsing debugging output?
# XXX	Run a subset of the tests?
# 
# FIX	Clear out MIB processing debug statements at the beginning.
#

USAGE="Usage: `basename $0` [-h][-acCnstTu] [<host> | start | stop]"



#------------------------------------ -o- 
# Definitions:
#	+ Log and configuration files and directories
#	+ Local function parameters
#	+ Demo parameters (some configurable by the user).
#
#
# NOTE	MAKEUSEROID() defines variables named '${user}oid'.
#	LOOKFOR() defines variable 'lookresults'.
#

export PATH=../apps:../agent:$PATH
export SNMPCONFPATH=

AGENTLOG=./demo2.agentlog
APPLOG=./demo2.applog
LOGDIR=./OLDLOGS

DEMOFUNCTIONS=./demo2.functions
AGENTCONFIG=./demo2.setupfile

PERSISTENTDIR=/var/snmp

CONFIGDIR=/tmp/snmp
CONFIGFILE=$CONFIGDIR/snmpd.conf

THEDATE=".`date '+%h%d_%H%M' | sed 's/\([a-z]\)0/\1/' | tr 'A-Z' 'a-z'`"

XTERMARGS="-sb -s -fn 7x13 -rv -sl 1000"
XTGEOSHAPE=80x32




autodoit=1		# TRUE means run DOIT() without a preceeding pause.
autoread=1		# Don't wait for <cr> from user between tests.
autotest=1		# Run all tests without any pauses between.
autoconfig=0		# Automatically configure the agent for all tests.

createUsers=1		# Test user creation.
runcommands=1		# FALSE means display actions without running anything.
dosleep=0		# TRUE means always sleep 1 second between tests.
handleagent=1		# Start/stop agent automatically, else print warning.

startonly=
stoponly=

defpass="my_passphrase"

host=localhost
TMPFILE=/tmp/snmp.demo.out

testcounter=0
succeeds=0
boots=		
time=	
lookresults=			
engineidstr=		
keychange=	



#------------------------------------ -o- 
# SNMP Commands.
#
DEBUGFLAG=-D
LOGGINGFLAG=-L
PORTFLAG="-p 1600"

APPDIR=../apps/	
AGENTDIR=../agent/

noAuthArgs="$PORTFLAG -n default -u initial -l noAuthNoPriv -v 3"
  AuthArgs="$PORTFLAG -n default -u initial -a MD5 -A $defpass -l authNoPriv -v 3"

 snmpset="${APPDIR}snmpset  $DEBUGFLAG -s -R 	$AuthArgs   	$host"
snmpwalk="${APPDIR}snmpwalk $DEBUGFLAG -s -R 	$noAuthArgs	$host"
 snmpget="${APPDIR}snmpget  $DEBUGFLAG -s -R 	$noAuthArgs 	$host"


#
# OIDs
#
usmUserSecurityName=`${APPDIR}snmptranslate $DEBUGFLAG -R usmUserSecurityName`
             noAuth=`${APPDIR}snmptranslate $DEBUGFLAG -R usmNoAuthProtocol`
             noPriv=`${APPDIR}snmptranslate $DEBUGFLAG -R usmNoPrivProtocol`

          sysUpTime=system.sysUpTime.0




#------------------------------------ -o- 
#
. $DEMOFUNCTIONS




#------------------------------------ -o- 
# Parse.
#
for arg
do
  if   test $arg = "-a"; then		handleagent=0
  elif test $arg = "-c"; then		autodoit=0
  elif test $arg = "-C"; then		autoconfig=1
  elif test $arg = "-n"; then		runcommands=0
  elif test $arg = "-s"; then		dosleep=1		
  elif test $arg = "-t"; then		autoread=0
  elif test $arg = "-T"; then		autotest=0
  elif test $arg = "-u"; then		createUsers=0

  elif test $arg = "start"; then	startonly=true
  elif test $arg = "stop";  then	stoponly=true

  elif test $arg = "-h"; then		
    echo $USAGE

cat <<BLORT
    
     -a:    Don't start/stop the agent.  Let the user do this.
     -c:    Pause before running commands.
     -C:    Automatically configure the agent for you.
     -n:    Don't actually run any commands.
     -s:    Sleep 1 second instead of pausing at requested spots.
     -t:    Pause at section titles.
     -T:    Pause at section titles.
     -u:    Do not create the users, assume they are already created.

 <host>:    The host with the agent that the commands should talk to.

  start:    Start the agent only.
   stop:    Stop the agent only.

BLORT

    exit 0

  else
    host=$arg
    handleagent=0
  fi

done	# endfor -- arg



#------------------------------------ -o- 
#
# Get setup:
#	+ (Stop only agent option.)
#	+ Configure the agent.
#	+ Move aside old log files.
#	+ (Start only agent option.)
#	+ Start xterms for the log files.
#

#
# Stop agent option.
#
[ -n "$stoponly" ] && {
	STOPAGENT

	echo
	echo "Deleting agent configuration file..."
	rm -rf $CONFIGDIR

	echo
	YESNO N "Okay to delete persistent storage in \"$PERSISTENTDIR\"?"
	[ $? -eq 1 ] && {
	    echo "Deleting..."
	    rm -rf $PERSISTENTDIR/*
	}

	exit 0
}


#
# Configure the agent.
#
[ "$autoconfig" = 1 ] &&  {
    echo
    echo "Setting up configuration file \"$CONFIGFILE\"..."

    if test ! -d $CONFIGDIR; then
	mkdir $CONFIGDIR
    fi

    rm -f $CONFIGFILE

    if test -f $CONFIGFILE; then
	echo "Could not remove old \"$CONFIGFILE\"!"
	echo
	echo "Exiting..."
	exit 1
    fi

    cat > $CONFIGFILE << EOF
`cat $AGENTCONFIG`
EOF

    SNMPCONFPATH=/tmp/snmp:/var/snmp
    export SNMPCONFPATH


    echo
    YESNO Y "Okay to delete persistent storage in \"$PERSISTENTDIR\"?"
    [ $? -eq 0 ] && {
	echo "Deleting..."
    	rm -rf $PERSISTENTDIR/*
	true

    } || {
	echo "Files remaining in \"$PERSISTENTDIR\":"
	ls -FC $PERSISTENTDIR
	echo
	echo "Exiting..."
	exit 1
    }

}  # endif -- autoconfig=1



#
# Start agent option.
#
[ -n "$startonly" ] && {
	STARTAGENT
	exit 0
}



#
# Move aside files from previous run.
#
echo
YESNO Y "Do you wish to save the previously existing log files?"

[ $? -eq 0 ] && {
	[ ! -e $LOGDIR ] && mkdir $LOGDIR

	cp $AGENTLOG	${LOGDIR}/${AGENTLOG}$THEDATE
	cp $APPLOG	${LOGDIR}/${APPLOG}$THEDATE

	gzip -r $LOGDIR 2>/dev/null &

	cat /dev/null >$AGENTLOG
	cat /dev/null >$APPLOG
}


#
# Start xterms to trace logfiles.
#
echo
YESNO Y "Do you wish to run individual xterms to trace the log files?"

[ $? -eq 0 ] && {
	touch $APPLOG $AGENTLOG

	STARTXTERM "Application LOG"	"tail -f $APPLOG"
	STARTXTERM "Agent LOG"		"tail -f $AGENTLOG"
}




#------------------------------------ -o- 
#
# Begin demo tests.
#

echo
GETRETORSLEEP

TITLE	"Beginning Demonstration"	\
	""				\
	"Using host: $host"

STOPAGENT		# Be sure it is not running.
STARTAGENT



#------------------------------------ -o- 
#
# Message types
#

TITLE	 "Sending a SNMPv1 message."

OKORFAIL "sysUpTime.*Timeticks" 	\
		snmpget -v 1 $PORTFLAG $host private system.sysUpTime.0


TITLE	 "Sending a SNMP v2c message."

OKORFAIL "sysUpTime.*Timeticks" 	\
		snmpget -v 2c $PORTFLAG $host private system.sysUpTime.0


TITLE	 "Sending a SNMP v3 message -- noAuthNoPriv."

OKORFAIL "sysUpTime.*Timeticks" 	\
		snmpget $noAuthArgs $host system.sysUpTime.0



#------------------------------------ -o- 
#
# Persistent storage
#

TITLE "Demonstrate persistent storage of snmpEngineBoots."	\
      "Note: You should see snmpEngineBoots.0 increment by one."

LOOKFOR "snmpEngineBoots.0" $snmpwalk snmpFrameworkMIB

boots=`echo $lookresults | tail -1 | awk '{print $NF}'`
boots=`expr $boots + 1`

STOPAGENT

STARTAGENT

echo
echo "boots: $boots ($lookresults)"
echo


OKORFAIL "snmpEngineBoots.0.=.$boots" $snmpwalk snmpFrameworkMIB



#------------------------------------ -o- 
#
# Agent configuration.
#

TITLE "Demonstrate that users, user passphrases -OR- Ku,"		\
      "and engineIDs can be configured in a configuration file."

#
# XXX	Put these elsewhere?  Another script?
#

DOIT "egrep userSet|engineID $HOME/.snmp/snmpd.conf /usr/local/share/snmp/snmpd.conf"


TITLE	"+++++++ NOT Demontrate that initial user data from USM RFC "	\
	"        can be specified."					\
	""								\
	"        (Its included in the agent automatically, you only "	\
	"         need to set the keys.)"

TITLE	"+++++++ NOT Demonstrating syntax for user creation at "	\
	"        the agent.  Look in \"$CONFIGFILE\" to see how "	\
	"        this could be accopmlished."



#------------------------------------ -o- 
#
# Creating users.
#

GETENGINEIDOID
MAKEUSEROID templateMD5
MAKEUSEROID templateSHA

if test $createUsers = 1; then
    TITLE "Creating Users: dolphin shark shark2 stingray stingray2."

    TITLE "Creating user dolphin."
    CREATEUSER dolphin $templateMD5oid $noPriv $noAuth 

    TITLE "Creating user shark."
    CREATEUSER shark $templateMD5oid $noPriv

    TITLE "Creating user shark2."
    CREATEUSER shark2 $templateSHAoid $noPriv

    TITLE "Creating user stingray."
    CREATEUSER stingray $templateMD5oid

    TITLE "Creating user stingray2."
    CREATEUSER stingray2 $templateSHAoid
fi



#------------------------------------ -o- 
#
# authPriv & encryption
#

TITLE "Send crypted packets." \
      "Demonstrate results are the same as noAuthNoPriv by "\
      "  parsing the agent debug output."

SETDEBUGGING 1

TITLE	 "Perform a get with shark."

OKORFAIL "sysUpTime.*Timeticks" snmpget $PORTFLAG -n default -u shark -l noAuthNoPriv -v 3 $host $sysUpTime

OKORFAIL "sysUpTime.*Timeticks" snmpget $PORTFLAG -n default -u shark -l authNoPriv -a MD5 -A "$defpass" -v 3 $host $sysUpTime


TITLE	 "Perform a get with shark2."

OKORFAIL "sysUpTime.*Timeticks" snmpget $PORTFLAG -n default -u shark2 -l noAuthNoPriv -v 3 $host $sysUpTime

OKORFAIL "sysUpTime.*Timeticks" snmpget $PORTFLAG -n default -u shark2 -l authNoPriv -a SHA -A "$defpass" -v 3 $host $sysUpTime


TITLE	 "Perform a get with stingray."

OKORFAIL "sysUpTime.*Timeticks" snmpget $PORTFLAG -n default -u stingray -l noAuthNoPriv -v 3 $host $sysUpTime

OKORFAIL "sysUpTime.*Timeticks" snmpget $PORTFLAG -n default -u stingray -l authPriv -a MD5 -A "$defpass" -x DES -X "$defpass"  -v 3 $host $sysUpTime


TITLE	 "Perform a get with stingray2."

OKORFAIL "sysUpTime.*Timeticks" snmpget $PORTFLAG -n default -u stingray2 -l noAuthNoPriv -v 3 $host $sysUpTime

OKORFAIL "sysUpTime.*Timeticks" snmpget $PORTFLAG -n default -u stingray2 -l authPriv -a SHA -A "$defpass" -x DES -X "$defpass" -v 3 $host $sysUpTime


SETDEBUGGING 0



#------------------------------------ -o- 
#
# Users can use lower levels of auth/priv requirements
#

TITLE "Send AuthNoPriv messages with a user configured for AuthPriv."

OKORFAIL "sysUpTime.*Timeticks" snmpget $PORTFLAG -n default -u stingray -l authNoPriv -a MD5 -A "$defpass" -v 3 $host $sysUpTime



#------------------------------------ -o- 
#
# Malformed packets (wrong key).
#

TITLE	"Send authenticated packets hashed with the wrong key"	\
      	"and examine the result for proper information."	\
      	"(We're using SHA authentication for a MD5 user to "	\
      	"produce the error.)"


OKORFAIL "Authentication.failure" snmpget $PORTFLAG -n default -u stingray -l authNoPriv -a SHA -A "$defpass" -v 3 $host $sysUpTime

TITLE	"Send malformed crypted packets and examine the result "	\
	"for proper information."					\
	"(We're using SHA authentication for a MD5 user to produce "	\
	"the error.)"

OKORFAIL "Authentication.failure" snmpget $PORTFLAG -n default -u stingray -l authPriv -a SHA -A "$defpass" -x DES -X "$defpass" -v 3 $host $sysUpTime



#------------------------------------ -o- 
#
# Key Change: MD5.
#

TITLE "Demonstrate KeyChange (MD5)."	\
      "Change kul for a user at the remote node."

keychange=`encode_keychange -t md5 -N "new_$defpass" -O "$defpass" -E 0x$engineidstr`

TITLE "Changing stingray's auth and priv key"	\
      "(using $keychange)."

OKORFAIL "usmUserPrivKeyChange.$stingrayoid.=.+Hex:" $snmpset usmUserPrivKeyChange.$stingrayoid x $keychange

OKORFAIL "usmUserAuthKeyChange.$stingrayoid.=.+Hex:" $snmpset usmUserAuthKeyChange.$stingrayoid x $keychange


TITLE "Perform a get using stingray to demonstrate it fails"	\
      "(using old key)."

OKORFAIL "Authentication.failure" snmpget $PORTFLAG -n default -u stingray -l authPriv -a MD5 -A "$defpass" -x DES -X "$defpass"  -v 3 $host $sysUpTime

TITLE	"Perform a get using stingray to demonstrate it succeeds"	\
	"(using new key)."

OKORFAIL "sysUpTime.*Timeticks" snmpget $PORTFLAG -n default -u stingray -l authNoPriv -a MD5 -A "new_$defpass" -x DES -X "$defpass" -v 3 $host $sysUpTime



#------------------------------------ -o- 
#
# Key Change: SHA
# 

TITLE "Demonstrate KeyChange (MD5)."	\
      "Change kul for a user at the remote node."

keychange=`encode_keychange -t sha1 -N "new_$defpass" -O "$defpass" -E 0x$engineidstr`


TITLE "Changing stingray2's auth and priv key"	\
      "(using $keychange)."

OKORFAIL "usmUserPrivKeyChange.$stingray2oid.=.+Hex:" $snmpset usmUserPrivKeyChange.$stingray2oid x $keychange
OKORFAIL "usmUserAuthKeyChange.$stingray2oid.=.+Hex:" $snmpset usmUserAuthKeyChange.$stingray2oid x $keychange


TITLE "Perform a get using stingray2 to demonstrate it fails"	\
      "(using old key)."

OKORFAIL "Authentication.failure" snmpget $PORTFLAG -n default -u stingray2 -l authPriv -a SHA -A "$defpass" -x DES -X "$defpass"  -v 3 $host $sysUpTime


TITLE	"Perform a get using stingray2 to demonstrate it succeeds"	\
	"(using new key)."

OKORFAIL "sysUpTime.*Timeticks" snmpget $PORTFLAG -n default -u stingray2 -l authNoPriv -a SHA -A "new_$defpass" -x DES -X "$defpass" -v 3 $host $sysUpTime



#------------------------------------ -o- 
#
# Cloning an account
#

TITLE "Use an admin user to clone a new account that has additional priveleges."

CREATEUSER whale $sharkoid

OKORFAIL "sysUpTime.*Timeticks" snmpget $PORTFLAG -n default -u whale -l authNoPriv -a MD5 -A "$defpass" -v 3 $host $sysUpTime



#------------------------------------ -o- 
#
# engineID & time discovery
#

TITLE	"Demonstrate engineID and time discovery."			 \
	"snmpget -noAuthNoPriv- to an agent that is not pre-configured." \
	"Note: Trace the 4 message exchange."

OKORFAIL "sysUpTime.*Timeticks" snmpget -s -R $noAuthArgs -d $host $sysUpTime

TITLE	"snmpget -AuthNoPriv- to an agent that is not pre-configured."	\
	"Note: Trace the 6 message exchange."

OKORFAIL "sysUpTime.*Timeticks" snmpget -s -T 0 1 -R $AuthArgs -d $host $sysUpTime



#------------------------------------ -o- 
#
# Proper time stamp handling.
#

TITLE "Demonstrate proper judgement of time stamps."


TITLE "Set the agent 200 seconds ahead of the client."		\
      "Run snmpget, then demonstrate that the client updates "	\
      "its sense of time for the agent."

GETBOOTSANDTIME

DOIT $snmpset snmpEngineTime.0 i `expr $time + 300`	# 200 + 100

OKORFAIL "sysUpTime.*Timeticks" 	\
	snmpget -T $boots $time -s -R $AuthArgs $host $sysUpTime


TITLE "Set the client 200 seconds behind the agent." \
      "snmpget and trace the 4 message exchange."

GETBOOTSANDTIME # update us

OKORFAIL "sysUpTime.*Timeticks" 	\
	snmpget -T $boots `expr $time - 200 ` -s -R $AuthArgs $host $sysUpTime


TITLE "Set the agent 200 seconds behind the client."			\
      "snmpget and trace/demonstrate lack of time synchronization"	\
      "and failure of the get."

OKORFAIL "Timeout.*Response" 	\
	snmpget -T $boots `expr $time + 200 ` -s -R $AuthArgs $host $sysUpTime


TITLE "Reboot the agent." \
      "snmpget and trace the 4 message exchange."

STOPAGENT

STARTAGENT

OKORFAIL "sysUpTime.*Timeticks" 					\
	snmpget -d -e $engineidstr -s -R $AuthArgs $host $sysUpTime

# XXX  Got that right?  Toss the following?
#
# OKORFAIL "sysUpTime.*Timeticks" 					\
# 	snmpget -d -e $engineidstr -T $boots `expr $time + 200 `	\
# 		-s -R $AuthArgs $host $sysUpTime


#------------------------------------ -o- 
# Cleanup & Exit.
#

TITLE "Done with the demonstration."

echo
STOPAGENT

echo
REPORT


echo
echo "Deleting agent configuration file..."
rm -rf $CONFIGDIR

echo
YESNO N "Okay to delete persistent storage in \"$PERSISTENTDIR\"?"
[ $? -eq 1 ] && {
    echo "Deleting..."
    rm -rf $PERSISTENTDIR/*
}


