
README testing/
===============

First, an example:

	% eval_suite.sh -l

This runs all the registered tests and reports whether they passed, or not.
Some information is given about the nature of test failures, if they occur.


Tests need to be written so that the string FAILED is associated with
failed sections, and SUCCESS with proper closure of a function.  The number
of SUCCESSes should be publicized in the eval_testlist file.

If a test has no FAILEDs and and the proper number of SUCCESSes, it is
considered to have PASSED.  Intermediate results provide some diagnostic
info to help determine what happened.

The test templates for C and sh code are T.c and T.sh.  The provide an
example of how a test should be instrumented to fit into this scheme.


See also the help output of:

	% eval_suite.sh -h
	% eval_oneprogram.sh -h

To learn the format of the eval_testlist file and how to manage tests
with the verbose switches set on.



		#		#		#		#


FILE LISTING
============

== Test suite control scripts.

eval_oneprogram.sh	Runs a single program taken from eval_testlist.

eval_suite.sh		Runs all programs in evel_testlist and verifies
				the number of SUCCESSes and FAILUREs
				for each to judge the health of the test.

eval_testlist		List of current tests.  ADD NEW TESTS HERE.


== C tests.

keymanagetest.c		Test for key management functions.
scapitest.c		Test for SCAPI functions.


== Script tests.

test_keychange.sh	Test KeyChange TC against a gold standard.
test_kul.sh		Test other key manipulation functions against
				gold standard.


== Data files.  "Gold standards."

	Data files for pre-existing tests.
	Syntax of the name is: "data.<test_sub_name>-<modifier_for_each_part>"

data.keychange-md5
data.keychange-sha1
data.keychange-sha1-des
data.kul-md5
data.kul-sha1		


== Test templates and tools environment.

test_tools.sh		Standard environment to include in script tests.
T.c
T.sh			Templates for C and sh tests.



						Thu Oct 22 00:30:49 EDT 1998

