## -*- c -*-
######################################################################
## Do the .h file
## @perleval $vars{shortname} =~ s/([A-Z])[a-z]+/$1/g@
######################################################################
@foreach $i table@
@open ${i}.h@
@eval $hack = "Id"
/*
 * Note: this file originally auto-generated by mib2c using
 *        $Id$
 *
 * $$hack:$
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef $i.uc_H
#define $i.uc_H


#ifdef __cplusplus
extern "C" {
#endif

#include <net-snmp/oid_array.h>
#include <net-snmp/table_array.h>

    /**
     * un-comment this line if this table has any external indexes.
     * This warning, and the rest, may be deleted once you've written
     * the appropriate sections of code.
     */
    /** #define ${i}_EXTERNAL_INDEX */

typedef struct ${i}_context_s {
    oid_array_header index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You'll probably have to fix a few types here...
     */
#ifdef ${i}_EXTERNAL_INDEX
#warning "TODO: add code for external index!"
#endif
    @foreach $c column@
        /** $c.syntax = $c.type */
        @eval $have_type = 0@
        @if "$c.type" eq "ASN_OCTET_STR"@
            @eval $have_type = 1@
            @eval $o_len = "65535"@
            @if "$c.syntax" eq "DisplayString"@
                @eval $o_len = "255"@
            @end@
            @if "$c.syntax" eq "SnmpAdminString"@
                @eval $o_len = "255"@
            @end@
            char $c[$o_len];
            long ${c}_len;
        @end@
        @if "$c.type" eq "ASN_OBJECT_ID"@
            @eval $have_type = 1@
            oid $c[MAX_OID_LEN];
            long ${c}_len;
        @end@
        @if "$c.type" eq "ASN_UNSIGNED"@
            @eval $have_type = 1@
            unsigned long $c;
        @end@
        @if "$c.type" eq "ASN_TIMETICKS"@
            @eval $have_type = 1@
            unsigned long $c;
        @end@
        @if "$c.type" eq "ASN_IPADDRESS"@
            @eval $have_type = 1@
            unsigned long $c;
        @end@
        @if "$c.type" eq "ASN_UINTEGER"@
            @eval $have_type = 1@
            unsigned long $c;
        @end@
        @if "$c.type" eq "ASN_COUNTER"@
            @eval $have_type = 1@
            unsigned long $c;
        @end@
        @if $have_type == 0@
            long $c;
        @end@

    @end@

    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */

} ${i}_context;

/*************************************************************
 * function declarations
 */
void init_$i(void);
void initialize_table_$i(void);
const ${i}_context * ${i}_get_by_idx(oid_array_header *);
int ${i}_get_value(request_info *, oid_array_header *, table_request_info *);


/*************************************************************
 * oid declarations
 */
extern oid ${i}_oid[];
extern size_t ${i}_oid_len;

/*************************************************************
 * column number definitions for table $i
 */
@foreach $c column@
#define COLUMN_$c.uc $c.subid
@if "$c.syntax" eq "RowStatus"@
   @eval $rs_name = "$c"@
@end@
@if "$c.syntax" eq "StorageType"@
   @eval $st_name = "$c"@
@end@
@end@

/* comment out the following line if you dont handle SET-REQUEST for $i */
#define ${i}_SET_HANDLING

/* comment out the following line if you cant create new rows */
#define ${i}_ROW_CREATION

/* comment out the following line if you dont want the secondary
 * index binary tree. */
#define ${i}_TREE

@if "$rs_name" ne ""@
/* uncommend the following line if you allow modifications to an
 * active row */
/** define ${i}_CAN_MODIFY_ACTIVE_ROW */

@end@
#ifdef ${i}_SET_HANDLING
void ${i}_set_reserve1( array_group * );
void ${i}_set_reserve2( array_group * );
void ${i}_set_action( array_group * );
void ${i}_set_commit( array_group * );
void ${i}_set_free( array_group * );
void ${i}_set_undo( array_group * );
#endif

#ifdef ${i}_ROW_CREATION
oid_array_header * ${i}_create_row( oid_array_header* );
oid_array_header * ${i}_duplicate_row( oid_array_header* );
oid_array_header * ${i}_delete_row( oid_array_header* );
#endif

#ifdef ${i}_TREE
${i}_context * ${i}_get( const char *name, int len );
#endif

/**
  And just for your enjoyment:
  
    @foreach $c column@
name                 : $c
uppercase            : $c.uc
dotted full OID      : $c.objectID
comma separated OID  : $c.commaoid
last component of oid: $c.subid
length of the oid    : $c.oidlength
node's ASN_XXX type  : $c.type
1 if it's writable   : $c.settable
node's access type   : $c.access
node's status        : $c.status
node's syntax        : $c.syntax

    @end@
*/


#ifdef __cplusplus
};
#endif

#endif /** $name.uc_H */
@end@
######################################################################
## Do the .c file
######################################################################
@foreach $i table@
@open ${name}.c@
@eval $hack = "Id"@
/*
 * Note: this file originally auto-generated by mib2c using
 *       $Id$
 *
 * $$hack:$
 *
 *
 * For help understanding NET-SNMP in general, please check the 
 *     documentation and FAQ at:
 *
 *     http://www.net-snmp.org/
 *
 *
 * For help understanding this code, the agent and how it processes
 *     requests, please check the following references.
 *
 *     http://www.net-snmp.org/tutorial/
 *     http://www.net-snmp.org/tutorial/toolkit/
 *     http://www.net-snmp.org/tutorial/agent/
 *
 *
 * And if all else fails, send a detailed message to the developers
 *     describing the problem you are having to:
 *
 *    net-snmp-coders@lists.sourceforge.net
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifdef IN_UCD_SNMP_SOURCE
/** If we're compiling this file inside the ucd-snmp source tree */

/** This should always be included first before anything else */
#include <config.h>

/** minimal include directives */
#include "mibincl.h"
#include "util_funcs.h"
#include "table.h"

#else /** !IN_UCD_SNMP_SOURCE */

#include <ucd-snmp/ucd-snmp-config.h>
#include <ucd-snmp/ucd-snmp-includes.h>
#include <ucd-snmp/ucd-snmp-agent-includes.h>

#endif /** !IN_UCD_SNMP_SOURCE */

#include <assert.h>

#include "${i}.h"

static     handler_registration *my_handler = NULL;

oid ${i}_oid[] = {$i.commaoid};
size_t ${i}_oid_len = OID_LENGTH(${i}_oid);


#ifdef ${i}_TREE
/************************************************************
 * keep binary tree to find context by name
 */
static int ${i}_cmp( void *lhs, void *rhs );
static ${i}_context * ${i}_find( ${i}_context *item );
static ${i}_context * ${i}_insert( ${i}_context *item );
static ${i}_context * ${i}_delete( ${i}_context * item );
static void * tree = NULL;

/************************************************************
 * compare two context pointers here. Return -1 if lhs < rhs,
 * 0 if lhs == rhs, and 1 if lhs > rhs.
 */
static int
${i}_cmp( void *lhs, void *rhs )
{
    ${i}_context *context_l =
        (${i}_context *)lhs;
    ${i}_context *context_r =
        (${i}_context *)rhs;

    /*
     * check primary key, then secondary. Add your own code if
     * there are more than 2 indexes
     */
    int rc;
    rc = strncmp( context_l->xxName, context_r->xxName,
                    SNMP_MIN(context_l->xxName_len, context_r->xxName_len) );

    if(rc)
        return rc;

    /*
     *  secondary keys
     */
    if(context_l->yy < context_r->yy) 
        return -1;

    return (context_l->yy == context_r->yy) ? 0 : 1;
}

/************************************************************
 * search tree
 */
${i}_context *
${i}_get( const char *name, int len )
{
    /** XXX TODO: handle null termination */
    ${i}_context tmp;
    if(len > sizeof(tmp.xxName))
        return NULL;

    strncpy( tmp.xxName, name, sizeof(tmp.xxName) );
    tmp.xxName_len = len;
    
    return ${i}_find( &tmp );
}
#endif


/************************************************************
/* Initialzies the $name module
 */
void
init_$name(void)
{
    initialize_table_$i();

    /*
     * TODO: perform and startup stuff here
     */
}

#ifdef ${i}_SET_HANDLING

/*
 * the *_extract_index routine
 */
int
${i}_extract_index( ${i}_context * ctx, oid_array_header * hdr )
{
    /*
     * temporary local storage for extracting oid index
     */
    @eval $first_idx = ""@
    @foreach $idx index@
        @if "$first_idx" eq ""@
        @eval $first_idx = $idx@
        @end@
    struct variable_list var_$idx;
    @end@
    int err = 0;

    /*
     * copy index, if provided
     */
    if(hdr) {
        assert(ctx->index.idx == NULL);
        if(snmp_clone_mem( (void*)&ctx->index.idx, hdr->idx,
                           hdr->idx_len * sizeof(oid) )) {
            return -1;
        }
        ctx->index.idx_len = hdr->idx_len;
    }

    /**
     * Create variable to hold each component of the index
     */
#ifdef ${i}_EXTERNAL_INDEX
#warning "TODO: add code for external index!"
#endif
    @foreach $idx index@
    memset( &var_$idx, 0x00, sizeof(var_$idx) );
    var_${idx}.type = $idx.type;
    var_$idx.next_variable = &var_XX;

    @end@

    /*
     * parse the oid into the individual components
     */
    parse_oid_indexes( hdr->idx, hdr->idx_len, &var_$first_idx );

    /*
     * copy components into the context structure
     */
#ifdef ${i}_EXTERNAL_INDEX
#warning "TODO: add code for external index!"
#endif
    @foreach $idx index@
    @eval $have_type = 0@
    @if "$idx.type" eq "ASN_OCTET_STR"@
    @eval $have_type = 1@
    if(var_$idx.val_len > sizeof(ctx->$idx))
       err = -1;
    else
        memcpy( ctx->$idx, var_$idx.val.string, var_$idx.val_len );
    ctx->${idx}_len = var_$idx.val_len;
    @end@
    @if "$idx.type" eq "ASN_OBJECT_ID"@
    @eval $have_type = 1@
    memcpy( ctx->$idx, var_$idx.val.string, var_$idx.val_len );
    ctx->$idx_len = var_$idx.val_len;
    @end@
    @if $have_type == 0@
    ctx->$idx = *var_$idx.val.integer;
    @end@

    @end@

    /*
     * TODO: check any syntax requrements for indexes here
     */


    /*
     * parsing may have allocated memory. free it.
     */
    snmp_reset_var_buffers( &var_$first_idx );

    return err;
}

@if "$rs_name" ne ""@
/************************************************************
 * the *_can_activate routine is called routine is called
 * when a row is changed to determine if all the values
 * set are consistent with the row's rules for  a row status
 * of ACTIVE.
 *
 * return 1 if the row could be ACTIVE
 * return 0 if the row is not ready for the ACTIVE state
 */
int ${i}_can_activate(${i}_context *ctx_old,
                      ${i}_context *ctx_new,
                      array_group * ag)
{
    /*
     * TODO: check for activation requirements here
     */
    return 1;
}

/************************************************************
 * the *_can_deactivate routine is called when a row that is
 * currently ACTIVE is set to a state other than ACTIVE. If
 * there are conditions in which a row should not be allowed
 * to transition out of the ACTIVE state (such as the row being
 * referred to by another row or table), check for them here.
 *
 * return 1 if the row can set to a non-ACTIVE state
 * return 0 if the row must remain in the ACTIVE state
 */
int ${i}_can_deactivate(${i}_context *ctx_old,
                        ${i}_context *ctx_new,
                        array_group * ag)
{
    /*
     * TODO: check for deactivation requirements here
     */
    return 1;
}

@end@
/************************************************************
 * the *_can_delete routine is call to determine if a row
 * can be deleted.
 *
 * return 1 if the row can be deleted
 * return 0 if the row cannot be deleted
 */
int ${i}_can_delete(${i}_context *ctx_old,
                    ${i}_context *ctx_new,
                    array_group * ag)
{
    /*
     * probably shouldn't delete a row that we can't
     * deactivate.
     */
    if(${i}_can_deactivate(ctx_old,ctx_new,ag))
        return 1;

    /*
     * TODO: check for other deletion requirements here
     */
    return 0;
}

#ifdef ${i}_ROW_CREATION
/************************************************************
 * the *_create_row routine is called by the table handler
 * to create a new row for a given index. If you need more
 * information (such as column values) to make a decision
 * on creating rows, you must create an initial row here
 * (to hold the column values), and you can examine the
 * situation in more detail in the *_set_reserve1 or later
 * states of set processing. Simple check for a NULL ctx_old
 * in those states and do detailed creation checking there.
 *
 * returns a newly allocated ${i}_context
 *   structure if the specified indexes are not illegal
 * returns NULL for errors or illegal index values.
 */
oid_array_header * ${i}_create_row( oid_array_header* hdr)
{
    ${i}_context * ctx =
        (${i}_context*)calloc(1,sizeof(*ctx));
    if(!ctx)
        return NULL;
        
    /*
     * TODO: check indexes, if necessary.
     */
    if(${i}_extract_index( ctx, hdr )) {
        free(ctx->index.idx);
        free(ctx);
        return NULL;
    }

    /*
     * TODO: initialize any default values here. This is also
     * first place you really should allocate any memory for
     * yourself to use.  If you allocated memory earlier,
     * make sure you free it for earlier error cases!
     */
    /**
     @foreach $c column@
     @if $c.settable@
     ctx->$c = 0;
     @end@
     @end@
    */

    return (oid_array_header *)ctx;
}

/************************************************************
 * the *_duplicate row routine
 */
oid_array_header * ${i}_duplicate_row( oid_array_header* hdr)
{
    ${i}_context * ctx_old = (${i}_context *)hdr;
    ${i}_context * ctx_new;
    if(!ctx_old)
        return;

    ctx_new = (${i}_context*)calloc(1,sizeof(*ctx_new));
    if(!ctx_new)
        return NULL;
        
    /*
     * copy index, if provided
     */
    assert(ctx_old->index.idx != NULL);
    if(snmp_clone_mem( (void*)&ctx_new->index.idx, ctx_old->index.idx,
                           ctx_old->index.idx_len * sizeof(oid) )) {
        free(ctx_new);
        ctx_new = NULL;
        return NULL;
    }
    ctx_new->index.idx_len = ctx_old->index.idx_len;
    

    /*
     * copy components into the context structure
     */
#ifdef ${i}_EXTERNAL_INDEX
#warning "TODO: add code for external index!"
#endif
    @foreach $c column@
    @eval $have_type = 0@
    @if "$c.type" eq "ASN_OCTET_STR"@
    @eval $have_type = 1@
    memcpy( ctx_new->$c, ctx_old->$c, ctx_old->${c}_len );
    ctx_new->${c}_len = ctx_old->${c}_len;
    @end@
    @if "$c.type" eq "ASN_OBJECT_ID"@
    @eval $have_type = 1@
    memcpy( ctx_old->$c, ctx_new->$c, ctx_old->${c}_len );
    ctx_new->${c}_len = ctx_old->${c}_len;
    @end@
    @if $have_type == 0@
    ctx_new->$c = ctx_old->$c;
    @end@

    @end@
    return (oid_array_header*) ctx_new;
}

/************************************************************
 * the *_delete_row method is called to delete a row.
 */
oid_array_header * ${i}_delete_row( oid_array_header* hdr)
{
    ${i}_context * ctx =
        (${i}_context*)hdr;

    if(ctx->index.idx)
        free(ctx->index.idx);

    /*
     * TODO: release any memory you allocated here...
     */

    /*
     * release header
     */
    free( ctx );

    return NULL;
}
#endif


/************************************************************
 * RESERVE is used to check the syntax of all the variables
 * provided, that the values being set are sensible and consistent,
 * and to allocate any resources required for performing the SET.
 * After this stage, the expectation is that the set ought to
 * succeed, though this is not guaranteed. (In fact, with the UCD
 * agent, this is done in two passes - RESERVE1, and
 * RESERVE2, to allow for dependancies between variables).
 *
 * AFTER calling this routine, the agent will call duplicate_row
 * to create a copy of the row.
 *
 * next state -> SET_RESERVE2 || SET_FREE
 */
void ${i}_set_reserve1( array_group *ag )
{
    ${i}_context *ctx_new =
            (${i}_context *)ag->new_row;
    ${i}_context *ctx_old =
            (${i}_context *)ag->old_row;
    struct variable_list *var;
    array_group_item *current;

    /*
     * TODO: loop through columns, check syntax and lengths. For
     * columns which have no dependencies, you could also move
     * the value/range checking here to attempt to catch error
     * cases as early as possible.
     */
    for( current = ag->list; current; current = current->next ) {

        var = current->ri->requestvb;

        switch(current->tri->colnum) {

        @foreach $c column@
        @if $c.settable@
        case COLUMN_$c.uc:
            /** $c.syntax = $c.type */
            if( var->type != $c.type ) {
                set_mode_request_error(MODE_SET_BEGIN, current->ri,
                                       SNMP_ERR_WRONGTYPE );
            }
            @if "$c.type" eq "ASN_OCTET_STR"@
                else if( var->val_len > sizeof(ctx_new->$c) ) {
            @end@
            @if "$c.type" eq "ASN_OBJECT_ID"@
                else if( var->val_len > sizeof(ctx_new->$c) ) {
            @end@
            @if "$c.type" ne "ASN_OCTET_STR"@
                else if( var->val_len != sizeof(ctx_new->$c) ) {
            @end@
                set_mode_request_error(MODE_SET_BEGIN, current->ri,
                                       SNMP_ERR_WRONGLENGTH );
            }
        break;

        @end@
        @end@
        default: /** We shouldn't get here */
            snmp_log(LOG_ERR, "unknown column in "
                     "${i}_set_reserve1\n");
        }

        ag->status = SNMP_MAX( ag->status, current->ri->status );
    }

    /*
     * done with all the columns. Could check row related
     * requirements here.
     */
}

void ${i}_set_reserve2( array_group *ag )
{
    struct variable_list *var;
    ${i}_context *ctx_new = (${i}_context *)ag->new_row;
    ${i}_context *ctx_old = (${i}_context *)ag->old_row;
    array_group_item *current;

    @if "$st_name" ne ""@
    STORAGETYPE_DECLARE;
    @end@
    @if "$rs_name" ne ""@
    ROWSTATUS_DECLARE;

    @end@
    /*
     * TODO: loop through columns, check for valid
     * values and any range constraints.
     */
    for( current = ag->list; current; current = current->next ) {

        var = current->ri->requestvb;

        switch(current->tri->colnum) {

        @foreach $c column@
        @if $c.settable@
        case COLUMN_$c.uc:
            /** $c.syntax = $c.type */
            @eval $have_check = 0@
            @if "$c" eq "$st_name"@
                @eval $have_check = 1@
                STORAGETYPE_VALIDATE( var, current->ri );
            @end@
            @if "$c" eq "$rs_name"@
                @eval $have_check = 1@
                ROWSTATUS_VALIDATE( var, current->ri );
            @end@
            @if $have_check == 0@
                @if "$c.type" eq "ASN_IPADDRESS"@
                    @eval $have_check = 1@
                    if ( XXX_check_ip( *var->val.integer ) ) {
                @end@
                @if "$c.type" eq "ASN_OBJECT_ID"@
                    @eval $have_check = 1@
                    if ( XXX_check_oid( var ) ) {
                @end@
                @if "$c.type" eq "ASN_OCTET_STR"@
                    @eval $have_check = 1@
                    if ( XXX_check_value( var->val.string, XXX ) ) {
                @end@
                @if "$c.syntax" eq "TruthValue"@
                    @eval $have_check = 1@
                    /** TruthValue allowable values */
                    if ((*var->val.integer != 2) &&
                        (*var->val.integer != 1)) {
                @end@
                @if $have_check != 1@
                    if ( *var->val.integer != XXX ) {
                @end@
                    /** or SNMP_ERR_INCONSISTENTVALUE */
                    set_mode_request_error(MODE_SET_BEGIN, current->ri,
                                           SNMP_ERR_BADVALUE );
                }
            @end@
        break;

        @end@
        @end@
        default: /** We shouldn't get here */
            snmp_log(LOG_ERR, "unknown column in "
                     "${i}_set_reserve2\n");
        }
    }

    /*
     * done with all the columns. Could check row related
     * requirements here.
     */
    @if "$st_name" ne ""@
    STORAGETYPE_CHECK( ctx_new->$st_name );
    @end@
    @if "$rs_name" ne ""@
    ROWSTATUS_CHECK( ctx_new->$rs_name, ctx_new->$st_name, ag->list->ri );
    @end@
}

/************************************************************
 * Assuming that the RESERVE phase was successful, the next
 * stage is indicated by the action value ACTION. This is used
 * to actually implement the set operation. However, this must
 * either be done into temporary (persistent) storage, or the
 * previous value stored similarly, in case any of the subsequent
 * ACTION calls fail.
 *
 * BEFORE calling this routine the agent will replace the old_row
 * in the array with the new_row.
 */
void ${i}_set_action( array_group *ag )
{
    struct variable_list *var;
    ${i}_context *ctx_new = (${i}_context *)ag->new_row;
    ${i}_context *ctx_old = (${i}_context *)ag->old_row;
    array_group_item *current;

    @if "$rs_name" ne ""@
    request_info * row_status_vb = NULL;
    int            row_err = 0;
    @end@

    assert( ctx_old || ctx_new );

    /*
     * TODO: loop through columns, copy varbind values
     * to context structure for the row.
     */
    for( current = ag->list; current; current = current->next ) {

        var = current->ri->requestvb;

        switch(current->tri->colnum) {

        @foreach $c column@
        @if $c.settable@
        case COLUMN_$c.uc:
            /** $c.syntax = $c.type */
            @eval $have_type = 0@
            @if "$c.type" eq "ASN_OCTET_STR"@
            @eval $have_type = 1@
            memcpy(ctx_new->$c,var->val.string,var->val_len);
            ctx_new->${c}_len = var->val_len;
            @end@
            @if "$c.type" eq "ASN_OBJECT_ID"@
            @eval $have_type = 1@
            memcpy(ctx_new->$c,var->val.objid,var->val_len);
            ctx_new->${c}_len = var->val_len;
            @end@
            @if "$rs_name" eq "$c"@
                row_status_vb = current->ri;
            @end@
            @if $have_type == 0@
            ctx_new->$c = *var->val.integer;
            @end@
        break;

        @end@
        @end@
        default: /** We shouldn't get here */
            snmp_log(LOG_ERR, "unknown column in "
                     "${i}_set_action\n");
        }
    }

    /*
     * done with all the columns. Could check row related
     * requirements here.
     */
    @if "$rs_name" ne ""@
    if(!row_status_vb)
        row_status_vb = ag->list->ri;
#ifndef ${i}_CAN_MODIFY_ACTIVE_ROW
    if( ctx_old && RS_IS_ACTIVE(ctx_old->$rs_name) &&
        ctx_new && RS_IS_ACTIVE(ctx_new->$rs_name) ) {
            row_err = 1;
    }
#endif

    /*
     * check activation/deactivation
     */
    if( ctx_new ) {
        /*
         * is this row ready to be active?
         */
        int row_ready = ${i}_can_activate(ctx_old,ctx_new,ag);

        /*
         * either a new row, or change to old row
         */
        if( RS_IS_GOING_ACTIVE(ctx_new->$rs_name) ) {
            if( ! row_ready ) {
                row_err = 1;
            }
            ctx_new->$rs_name = RS_ACTIVE;
        }
        else {
            if(ctx_old) {
                /*
                 * change
                 */
                if( RS_IS_ACTIVE(ctx_old->$rs_name) ) {
                    /*
                     * check preqs for deactivation
                     */
                    if(! ${i}_can_deactivate(ctx_old,ctx_new,ag)) {
                        row_err = 1;
                    }
                }
            }
            else {
                /*
                 * new row
                 */
            }

            if( row_ready )
                ctx_new->$rs_name = RS_NOTINSERVICE;
            else
                ctx_new->$rs_name = RS_NOTREADY;
        }
    }
    else {
        /*
         * check pre-reqs for delete row
         */
        if(! ${i}_can_delete(ctx_old,ctx_new,ag)) {
            row_err = 1;
        }
    }
    if(row_err) {
        set_mode_request_error(MODE_SET_BEGIN, row_status_vb,
                               SNMP_ERR_INCONSISTENTVALUE);
        return;
    }

    @end@
    /*
     * TODO: if you have dependencies on other tables, this would be
     * a good place to check those, too.
     */

#ifdef ${i}_TREE
    /*
     * update secondary index
     */
    if(ctx_old)
       ${i}_delete( ctx_old );
    if(ctx_new)
       ${i}_insert( ctx_new );
#endif
}

/************************************************************
 * Only once the ACTION phase has completed successfully, can
 * the final COMMIT phase be run. This is used to complete any
 * writes that were done into temporary storage, and then release
 * any allocated resources. Note that all the code in this phase
 * should be "safe" code that cannot possibly fail (cue
 * hysterical laughter). The whole intent of the ACTION/COMMIT
 * division is that all of the fallible code should be done in
 * the ACTION phase, so that it can be backed out if necessary.
 */
void ${i}_set_commit( array_group *ag )
{
    struct variable_list *var;
    ${i}_context *ctx_new = (${i}_context *)ag->new_row;
    ${i}_context *ctx_old = (${i}_context *)ag->old_row;
    array_group_item *current;

    /*
     * loop through columns
     */
    for( current = ag->list; current; current = current->next ) {

        var = current->ri->requestvb;

        switch(current->tri->colnum) {

        @foreach $c column@
        @if $c.settable@
        case COLUMN_$c.uc:
            /** $c.syntax = $c.type */
        break;

        @end@
        @end@
        default: /** We shouldn't get here */
            snmp_log(LOG_ERR, "unknown column in "
                     "${i}_set_commit\n");
        }
    }

    /*
     * done with all the columns. Could check row related
     * requirements here.
     */
}

/************************************************************
 * If either of the RESERVE calls fail, the write routines
 * are called again with the FREE action, to release any resources
 * that have been allocated. The agent will then return a failure
 * response to the requesting application.
 *
 * AFTER calling this routine, the agent will delete old_row.
 */
void ${i}_set_free( array_group *ag )
{
    struct variable_list *var;
    ${i}_context *ctx_new = (${i}_context *)ag->new_row;
    ${i}_context *ctx_old = (${i}_context *)ag->old_row;
    array_group_item *current;

    /*
     * loop through columns
     */
    for( current = ag->list; current; current = current->next ) {

        var = current->ri->requestvb;

        switch(current->tri->colnum) {

        @foreach $c column@
        @if $c.settable@
        case COLUMN_$c.uc:
            /** $c.syntax = $c.type */
        break;

        @end@
        @end@
        default: /** We shouldn't get here */
            snmp_log(LOG_ERR, "unknown column in "
                     "${i}_set_free\n");
        }
    }

    /*
     * done with all the columns. Could check row related
     * requirements here.
     */
}

/************************************************************
 * If the ACTION phase does fail (for example due to an apparently
 * valid, but unacceptable value, or an unforeseen problem), then
 * the list of write routines are called again, with the UNDO
 * action. This requires the routine to reset the value that was
 * changed to its previous value (assuming it was actually changed),
 * and then to release any resources that had been allocated. As
 * with the FREE phase, the agent will then return an indication
 * of the error to the requesting application.
 *
 * BEFORE calling this routine, the agent will remove the new row
 * from the table and replace it with the old row.
 *
 * AFTER calling this routing, the agent will delete the new_row.
 */
void ${i}_set_undo( array_group *ag )
{
    struct variable_list *var;
    ${i}_context *ctx_new = (${i}_context *)ag->new_row;
    ${i}_context *ctx_old = (${i}_context *)ag->old_row;
    array_group_item *current;

    /*
     * loop through columns
     */
    for( current = ag->list; current; current = current->next ) {

        var = current->ri->requestvb;

        switch(current->tri->colnum) {

        @foreach $c column@
        @if $c.settable@
        case COLUMN_$c.uc:
            /** $c.syntax = $c.type */
        break;

        @end@
        @end@
        default: /** We shouldn't get here */
            snmp_log(LOG_ERR, "unknown column in "
                     "${i}_set_undo\n");
        }
    }

    /*
     * done with all the columns. Could check row related
     * requirements here.
     */
#ifdef ${i}_TREE
    /*
     * update secondary index
     */
    if(ctx_new)
        ${i}_delete( ctx_new );
    if(ctx_old)
        ${i}_insert( ctx_old );
#endif
}

#endif /** ${i}_SET_HANDLING */


#ifdef ${i}_TREE
static ${i}_context *
${i}_find( ${i}_context *item )
{
    ${i}_context **item_ptr =
        (${i}_context **)
        tfind( item, &tree, ${i}_cmp );

    return item_ptr ? *item_ptr : NULL;
}

static ${i}_context *
${i}_insert( ${i}_context *item )
{
    ${i}_context **item_ptr =
        (${i}_context **)
        tsearch( item, &tree, ${i}_cmp );

    return item_ptr ? *item_ptr : NULL;
}

static ${i}_context *
${i}_delete( ${i}_context *item )
{
    ${i}_context **item_ptr =
        (${i}_context **)
        tdelete( item, &tree, ${i}_cmp );

    return item_ptr ? *item_ptr : NULL;
}

#endif

/************************************************************
 *
 * Initialize the $i table by defining it's contents and how it's structured
 */
void
initialize_table_$i(void)
{
    static table_array_callbacks cb;
    table_registration_info *table_info;

    if(my_handler) {
        snmp_log(LOG_ERR, "initialize_table_${i}_handler called again\n");
        return;
    }

    memset(&cb, 0x00, sizeof(cb));

    /** create the table structure itself */
    table_info = SNMP_MALLOC_TYPEDEF(table_registration_info);

    /* if your table is read only, it's easiest to change the
       HANDLER_CAN_RWRITE definition below to HANDLER_CAN_RONLY */
    my_handler = create_handler_registration("$i",
                                             table_array_helper_handler,
                                             ${i}_oid,
                                             ${i}_oid_len,
                                             HANDLER_CAN_RWRITE);
            
    if (!my_handler || !table_info) {
        snmp_log(LOG_ERR, "malloc failed in "
                 "initialize_table_${i}_handler\n");
        return; /** mallocs failed */
    }

    /***************************************************
     * Setting up the table's definition
     */
    /*
     * TODO: add any external indexes here.
     */
#ifdef ${i}_EXTERNAL_INDEX
#warning "TODO: add code for external index!"
#endif

    /*
     * internal indexes
     */
    @foreach $idx index@
        /** index: $idx */
        table_helper_add_index(table_info, $idx.type);
    @end@

    @eval $minv = 0xffffffff@
    @eval $maxv = 0@
    @foreach $c column@
    @if ! $c.noaccess@
    @eval $minv = min($minv, $c.subid)@
    @end@
    @eval $maxv = max($maxv, $c.subid)@
    @end@
    table_info->min_column = $minv;
    table_info->max_column = $maxv;

    /***************************************************
     * registering the table with the master agent
     */
    cb.get_value = ${i}_get_value;

#ifdef ${i}_SET_HANDLING
#ifdef ${i}_ROW_CREATION
    cb.create_row = ${i}_create_row;
    cb.duplicate_row = ${i}_duplicate_row;
    cb.delete_row = ${i}_delete_row;
#endif
    cb.set_reserve1 = ${i}_set_reserve1;
    cb.set_reserve2 = ${i}_set_reserve2;
    cb.set_action = ${i}_set_action;
    cb.set_commit = ${i}_set_commit;
    cb.set_free = ${i}_set_free;
    cb.set_undo = ${i}_set_undo;
#endif
    DEBUGMSGTL(("initialize_table_$i",
                "Registering table $i "
                "as a table array\n"));
    register_table_array(my_handler, table_info, &cb, 1);
}

/************************************************************
 * ${i}_get_value
 */
int ${i}_get_value(
            request_info *request,
            oid_array_header *item,
            table_request_info *table_info )
{
    struct variable_list *var = request->requestvb;
    ${i}_context *context = (${i}_context *)item;

    switch(table_info->colnum) {

        @foreach $c column@
            @eval $have_type = 0@
        case COLUMN_$c.uc:
            /** $c.syntax = $c.type */
            snmp_set_var_typed_value(var, $c.type,
                         (char*)&context->$c,
            @if "$c.type" eq "ASN_OBJECT_ID"@
                @eval $have_type = 1@
                         context->${c}_len );
            @end@
            @if "$c.type" eq "ASN_OCTET_STR"@
                @eval $have_type = 1@
                         context->${c}_len );
            @end@
            @if $have_type == 0@
                         sizeof(context->$c) );
            @end@
        break;

        @end@
    default: /** We shouldn't get here */
        snmp_log(LOG_ERR, "unknown column in "
                 "${i}_get_value\n");
    }
}

const ${i}_context *
${i}_get_by_idx(oid_array_header * hdr)
{
    return (const ${i}_context *)
    table_array_get_by_index( my_handler, hdr );
}

@end@
@end@
@end@
