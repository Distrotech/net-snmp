## -*- c -*-
######################################################################
## Do the .h file
######################################################################
@open include/${name}.h@
/*
 * Note: this file originally auto-generated by mib2c using
 *        $Id$
 */
#ifndef $name.uc_H
#define $name.uc_H

/** function declarations */
void init_$name(void);
@foreach $i table@

#include "${i}_user.h"

void initialize_table_$i(void);
NodeHandler ${i}_handler;
@end@
@foreach $i table@

/* column number definitions for table $i */
@foreach $c column@
#define COLUMN_$c.uc		$c.subid
@end@
@end@

#endif /** $name.uc_H */
######################################################################
## Do the .c file
######################################################################
@open auto/${name}.c@
/*
 * Note: this file originally auto-generated by mib2c using
 *       $Id$
 */

#ifdef IN_UCD_SNMP_SOURCE
/** If we're compiling this file inside the ucd-snmp source tree */

/** This should always be included first before anything else */
#include <config.h>

/** minimal include directives */
#include "mibincl.h"
#include "util_funcs.h"

#else /** !IN_UCD_SNMP_SOURCE */

#include <ucd-snmp/ucd-snmp-config.h>
#include <ucd-snmp/ucd-snmp-includes.h>
#include <ucd-snmp/ucd-snmp-agent-includes.h>

#endif /** !IN_UCD_SNMP_SOURCE */

#include "${name}.h"


@foreach $i table@
/* Initialize the $i table by defining it's contents and how it's structured */
void
initialize_table_$i(void)
{
    static table_array_callbacks cb;
    static oid ${i}_oid[] = {$i.commaoid};
    size_t ${i}_oid_len = OID_LENGTH(${i}_oid);
    table_registration_info *table_info;
    handler_registration *my_handler;

    /** create the table structure itself */
    table_info = SNMP_MALLOC_TYPEDEF(table_registration_info);

    /* if your table is read only, it's easiest to change the
       HANDLER_CAN_RWRITE definition below to HANDLER_CAN_RONLY */
    my_handler = create_handler_registration("$i",
                                             table_array_helper_handler,
                                             ${i}_oid,
                                             ${i}_oid_len,
                                             HANDLER_CAN_RWRITE);
            
    if (!my_handler || !table_info) {
        snmp_log(LOG_ERR, "malloc failed in "
                 "initialize_table_${i}_handler\n");
        return; /** mallocs failed */
    }

    /***************************************************
     * Setting up the table's definition
     */
    @foreach $idx index@
        /** index: $idx */
        table_helper_add_index(table_info, $idx.type);
    @end@

    @eval $minv = 0xffffffff@
    @eval $maxv = 0@
    @foreach $c column@
    @if ! $c.noaccess@
    @eval $minv = min($minv, $c.subid)@
    @end@
    @eval $maxv = max($maxv, $c.subid)@
    @end@
    table_info->min_column = $minv;
    table_info->max_column = $maxv;

    /***************************************************
     * registering the table with the master agent
     */
    cb.get_value = ${i}_get_value;

#ifdef ${i}_SET_HANDLING
#ifdef ${i}_ROW_CREATION
    cb.create_row = ${i}_create_row;
    cb.delete_row = ${i}_delete_row;
#else
    cb.create_row = cb.delete_row= NULL;
#endif
    cb.set_reserve1 = ${i}_set_reserve1;
    cb.set_reserve2 = ${i}_set_reserve2;
    cb.set_action = ${i}_set_action;
    cb.set_commit = ${i}_set_commit;
    cb.set_free = ${i}_set_free;
    cb.set_undo = ${i}_set_undo;
#else
    cb.set_reserve1 = cb.set_reserve2 = cb.set_action = cb.set_commit = 
        cb.set_free = cb.set_undo = NULL;
#endif
    DEBUGMSGTL(("initialize_table_$i",
                "Registering table $i "
                "as a table array\n"));
    register_table_array(my_handler, table_info, &cb, 1);
}
@end@

/** Initialzies the $name module */
void
init_$name(void)
{
    /** here we initialize all the tables we're planning on supporting */
    @foreach $i table@
        initialize_table_$i();
    @end@
}
@end@
